package djFlixel.gui;
import djFlixel.gfx.Palette_DB32;
import djFlixel.SimpleCoords;
import djFlixel.SimpleVector;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxSpriteGroup;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;


// -- TODO --
// Parameterize colors and styles
// --
class Toast extends FlxSpriteGroup
{
	// Text padding from the edge of the box.
	static inline var PADDING:Int = 4;
	// Default time to stay on screen.
	static inline var TIME_ONSCREEN_DEF:Float = 3;
	// Default time to tween.
	static inline var TIME_TWEEN_DEF:Float = 0.5;
	
	// Default width
	public var WIDTH(default, null):Int;
	// HEIGHT is autogenerated from text height
	public var HEIGHT(default, null):Int;
	
	// User set tweaked position
	public var offsetPos:SimpleCoords;
	
	
	// Stylings
	var stylePair1:FlxTextFormatMarkerPair;
	var stylePair2:FlxTextFormatMarkerPair;
	
	// Default alignment
	var alignX:String;
	var alignY:String;

	// -- Visual Elements
	var text:FlxText;
	var bg:FlxSprite;
	
	// Duration of the tween when animating in and out
	var animTime:Float;
	// When animating, start and end to these positions
	var animStartPoint:SimpleVector;
	var animEndPoint:SimpleVector;
	// Store the tween for future reference
	var animTween:FlxTween;
	
	//====================================================;
	
	/**
	 * @param	_width  Set the width of the toast box
	 * @param	_alignX left,center,right
	 * @param	_alignY top,bottom
	 */
	public function new(_width:Int = 96, _alignY:String = "bottom", _alignX:String = "center", _animationTime:Float = TIME_TWEEN_DEF)
	{
		super();
		
		WIDTH = _width;
		alignX = _alignX;
		alignY = _alignY;
		
		// - Create the bg
		// : note : no graphic yet, it will be created later.
		bg = new FlxSprite();
		bg.alpha = 0.9;
		add(bg);
		
		// - Create the text
		text = new FlxText(PADDING, PADDING, WIDTH - (PADDING * 2));
		text.color = Palette_DB32.COL_22;
		add(text);
		
		animTween = null;
		animTime = _animationTime;
		animStartPoint = new SimpleVector();
		animEndPoint = new SimpleVector();
		offsetPos = new SimpleCoords(4, 4);
		
		solid = false;
		visible = false;
		
		if (["left", "center", "right"].indexOf(alignX) < 0) {
			trace('Error: X Align TYPO ($alignX) , setting to center');
			alignX = "center";
		}
		if (["top", "bottom"].indexOf(alignY) < 0) {
			trace('Error: Y Align TYPO ($alignY) , setting to bottom');
			alignY = "bottom";
		}
		
		stylePair1 = new FlxTextFormatMarkerPair(new FlxTextFormat(Palette_DB32.COL_16, true), "#");
		stylePair2 = new FlxTextFormatMarkerPair(new FlxTextFormat(Palette_DB32.COL_27, true), "$");
	}//---------------------------------------------------;
	
	// --
	// Force the toast to offscreen with an animation
	public function hide()
	{
		
	}//---------------------------------------------------;
	
	override public function destroy():Void 
	{
		super.destroy();
		if (animTween != null) {
			animTween.destroy(); animTween = null;
		}
		animStartPoint = null;
		animEndPoint = null;
		offsetPos = null;
		stylePair1 = null;
		stylePair2 = null;
	}//---------------------------------------------------;
	
	/**
	 * 
	 * @param	ftext Markup styles [ # , $ ]
	 * @param	timeToShow
	 * @param  _alignY Override default Y alignment, just for this time only
	 * @param  _alignX Override default X alignment, just for this time only
	 */
	public function fire(ftext:String, timeToShow:Float = TIME_ONSCREEN_DEF, ?_alignY:String, ?_alignX:String)
	{
		if (animTween != null) {
			animTween.cancel();
			animTween = null;
		}
		
		// -- Set the new content
		text.applyMarkup(ftext, [stylePair1, stylePair2]);
		HEIGHT = Std.int(text.height + (PADDING * 2));
		bg.makeGraphic(WIDTH, HEIGHT, Palette_DB32.COL_23);
		
		// Check alignment
		var ax:String = _alignX != null?_alignX:alignX;
		var ay:String = _alignY != null?_alignY:alignY;
		
		// - Figure out the start and endpoints for the x and y axis
		switch(ax) {
			case "left"	:
				animEndPoint.x = 0 + offsetPos.x;
				animStartPoint.x = animEndPoint.x;
			case "right":
				animEndPoint.x = FlxG.width - WIDTH - offsetPos.x;
				animStartPoint.x = animEndPoint.x;
			case "center":
				animEndPoint.x = (FlxG.width / 2) - (WIDTH / 2);
				animStartPoint.x = animEndPoint.x;
			default:
				throw "Alignment is not defined !!";
		}
		
		switch(ay) {
			case "top":
				animEndPoint.y = 0 + offsetPos.y;
				animStartPoint.y = -HEIGHT + offsetPos.y;
			case "bottom":
				animEndPoint.y = FlxG.height - HEIGHT - offsetPos.y;
				animStartPoint.y = animEndPoint.y + HEIGHT + offsetPos.y;
			default:
				throw "Alignment is not defined !!";				
		}
	
		// - Start the tween
		
		this.x = animStartPoint.x;
		this.y = animStartPoint.y;
		this.visible = true;
		
		animTween = FlxTween.tween(this, { x:animEndPoint.x, y:animEndPoint.y }, animTime, {
				ease:FlxEase.bounceOut, 
				onComplete: function(e:FlxTween) {
					// When the toast is on, wait X seconds and anim out
					animTween = FlxTween.tween(this, 
						{ x:animStartPoint.x, y:animStartPoint.y }, animTime, {
						  ease:FlxEase.quartOut,
						  startDelay:timeToShow,
						  onComplete:function(e:FlxTween) {
							this.visible = false;
							animTween.cancel();
							animTween = null;
						}});					
				}// -- first onComplete
			});
	}//---------------------------------------------------;
	
	
}// -- end -- //